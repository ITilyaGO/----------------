from PIL import Image, ImageDraw, ImageFont
import random
import os
import datetime
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm   # pip install tqdm

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
input_file = "–ö–∞—Ä—Ç–∞ –∫–≤–∞–¥—Ä–∞—Ç—ã SRA3.png"
cols = 9   # —Å–∫–æ–ª—å–∫–æ —Ç–∞–π–ª–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
rows = 13  # —Å–∫–æ–ª—å–∫–æ —Ç–∞–π–ª–æ–≤ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
gap = 80   # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–π–ª–∞–º–∏ (px)
grid_line_width = 8  # —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —Å–µ—Ç–∫–∏
font_scale = 1
save_tiles = False   # —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏

# –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
font_path = "DearType - Lifehack Sans Medium.otf"
Image.MAX_IMAGE_PIXELS = None

# === –î–ò–†–ï–ö–¢–û–†–ò–Ø –î–õ–Ø –í–´–í–û–î–ê ===
timestamp = datetime.datetime.now().strftime("%Y.%m.%d_%H.%M.%S")
output_dir = os.path.join(os.getcwd(), timestamp)
os.makedirs(output_dir, exist_ok=True)   # ‚Üê –≤–æ—Ç —ç—Ç–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ

output_folder = os.path.join(output_dir, "tiles")
if save_tiles:
    os.makedirs(output_folder, exist_ok=True)


output_shuffled = os.path.join(output_dir, "shuffled.png")
output_grid = os.path.join(output_dir, "grid.png")

# === –ó–ê–ì–†–£–ó–ö–ê ===
print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
img = Image.open(input_file).convert("RGBA")
w, h = img.size

# –ü–æ–ª—É—á–∞–µ–º DPI –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
dpi = img.info.get("dpi", (96, 96))[0]  # –±–µ—Ä—ë–º X DPI, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 96
px_per_mm = dpi / 25.4

# === –†–ê–°–ß–Å–¢ –†–ê–ó–ú–ï–†–ê –ö–í–ê–î–†–ê–¢–û–í ===
tile_w = w // cols
tile_h = h // rows
tile_size = min(tile_w, tile_h)
tile_w = tile_h = tile_size

# === –û–ë–†–ï–ó–ö–ê –ö–ê–†–¢–ò–ù–ö–ò ===
new_w = tile_w * cols
new_h = tile_h * rows
crop_x = w - new_w
crop_y = h - new_h
if crop_x > 0 or crop_y > 0:
    print(f"‚ö†Ô∏è –û—Ç–±—Ä–æ—à–µ–Ω–æ —Å–ø—Ä–∞–≤–∞: {crop_x}px, —Å–Ω–∏–∑—É: {crop_y}px")

img = img.crop((0, 0, new_w, new_h))

tile_mm = tile_size / px_per_mm
print(f"üî≤ –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞: {tile_size}px ‚âà {tile_mm:.2f} –º–º")

# === –†–ê–ó–ë–ò–í–ê–ï–ú –ù–ê –ö–£–°–û–ß–ö–ò ===
tiles = []
for row in range(rows):
    for col in range(cols):
        box = (col * tile_w, row * tile_h, (col + 1) * tile_w, (row + 1) * tile_h)
        tile = img.crop(box)
        tiles.append(tile)

# === –°–û–•–†–ê–ù–Ø–ï–ú –û–¢–î–ï–õ–¨–ù–´–ï (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
if save_tiles:
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–ª—ã...")
    def save_tile(data):
        idx, tile = data
        path = os.path.join(output_folder, f"tile_{idx+1}.png")
        tile.save(path)

    with ThreadPoolExecutor() as executor:
        list(tqdm(executor.map(save_tile, enumerate(tiles)), total=len(tiles), desc="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–π–ª–æ–≤"))

# === –°–û–ó–î–ê–Å–ú –ü–ï–†–ï–ú–ï–®–ê–ù–ù–û–ï ===
print("üß© –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
all_tiles = tiles[:]
random.shuffle(all_tiles)

shuffled_w = cols * tile_w + (cols - 1) * gap
shuffled_h = rows * tile_h + (rows - 1) * gap
shuffled_img = Image.new("RGBA", (shuffled_w, shuffled_h), (255, 255, 255, 255))

i = 0
for row in tqdm(range(rows), desc="–°–±–æ—Ä–∫–∞ shuffled"):
    for col in range(cols):
        x = col * (tile_w + gap)
        y = row * (tile_h + gap)
        shuffled_img.paste(all_tiles[i], (x, y))
        i += 1

shuffled_img.save(output_shuffled)

# === –°–û–ó–î–ê–Å–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –° –°–ï–¢–ö–û–ô ===
print("üó∫Ô∏è –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ç–∫–æ–π...")
grid_w = new_w + tile_w
grid_h = new_h + tile_h
grid_img = Image.new("RGBA", (grid_w, grid_h), (255, 255, 255, 255))
grid_img.paste(img, (tile_w, tile_h))
draw = ImageDraw.Draw(grid_img)

# –õ–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
for c in tqdm(range(cols + 1), desc="–†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π"):
    x = tile_w + c * tile_w
    draw.line([(x, tile_h), (x, grid_h)], fill="black", width=grid_line_width)
for r in tqdm(range(rows + 1), desc="–†–∏—Å–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π"):
    y = tile_h + r * tile_h
    draw.line([(tile_w, y), (grid_w, y)], fill="black", width=grid_line_width)

# –ü–æ–¥–ø–∏—Å–∏
font_size = int(tile_h * font_scale)
font_mm = font_size / px_per_mm
print(f"üî§ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {font_size}px ‚âà {font_mm:.2f} –º–º")

try:
    font = ImageFont.truetype(font_path, font_size)
except OSError:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {font_path}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    font = ImageFont.load_default()

ascent, descent = font.getmetrics()

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É —Å —É—á—ë—Ç–æ–º line gap
def center_text(draw, text, x0, y0, cell_w, cell_h, font):
    bbox = draw.textbbox((0, 0), text, font=font)
    tw, th = bbox[2] - bbox[0], bbox[3] - bbox[1]
    x = x0 + (cell_w - tw) // 2
    y = y0 + (cell_h - th) // 2 - bbox[1]   # –≤–æ—Ç —Ç—É—Ç -bbox[1] —É–±–∏—Ä–∞–µ—Ç "—É–µ–∑–¥"
    return x, y

# –¶–∏—Ñ—Ä—ã —Å–≤–µ—Ä—Ö—É
for c in tqdm(range(cols), desc="–ü–æ–¥–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É"):
    text = str(c + 1)
    x, y = center_text(draw, text, tile_w + c * tile_w, 0, tile_w, tile_h, font)
    draw.text((x, y), text, fill="black", font=font)

# –ë—É–∫–≤—ã —Å–ª–µ–≤–∞
letters = list("–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø")
for r in tqdm(range(rows), desc="–ü–æ–¥–ø–∏—Å–∏ —Å–ª–µ–≤–∞"):
    text = letters[r]
    x, y = center_text(draw, text, 0, tile_h + r * tile_h, tile_w, tile_h, font)
    draw.text((x, y), text, fill="black", font=font)

grid_img.save(output_grid)

print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
print(f"üìÇ –ü–∞–ø–∫–∞: {output_dir}")
print(f"üß© –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ: {output_shuffled}")
print(f"üó∫Ô∏è –°–µ—Ç–∫–∞: {output_grid}")
if save_tiles:
    print(f"üñºÔ∏è –¢–∞–π–ª—ã: {output_folder}")
else:
    print(f"üñºÔ∏è –¢–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å (save_tiles=False)")
