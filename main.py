import argparse
import os
from concurrent.futures import ProcessPoolExecutor, as_completed

from config import Config
from image_loader import load_image
from tiles import split_tiles, load_random_state, generate_random_state
from white_tiles import detect_white_tiles, save_white_tiles, load_white_tiles
from grid import make_grid
from sheets import make_sheets_from_state
from io_helpers import save_answers


def task_grid(cfg, img, tile_size, px_per_mm, dpi, output_dir):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏."""
    output_path = os.path.join(output_dir, "grid.png")
    make_grid(cfg, img, tile_size, px_per_mm, dpi, output_path)
    return f"üíæ –°–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚Üí {output_path}"


def task_sheets(cfg, img_tiles, state, px_per_mm, dpi, output_dir, threads, selected_pages):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è shuffled –∏ answers-–ª–∏—Å—Ç–æ–≤."""
    results = make_sheets_from_state(cfg, img_tiles, state, px_per_mm, dpi, output_dir,
                                     threads=threads, pages=selected_pages)
    # results = [(shuffled_path, answers_path), ...]
    answers_log = [f"{os.path.basename(s)}, {os.path.basename(a)}" for s, a in results]

    answers_txt = os.path.join(output_dir, "answers.txt")
    save_answers(answers_log, cfg.random_seed, answers_txt)
    return f"üíæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã shuffled/answers-–ª–∏—Å—Ç—ã ‚Üí {answers_txt}"



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–∏—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--project", type=str, help="–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ –≤ out/)")
    parser.add_argument("--detect-whites", action="store_true", help="–¢–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤")
    parser.add_argument("--reshuffle", action="store_true", help="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å random_state.json")
    parser.add_argument("--pages", type=str, help="–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä 1,3,5)")
    parser.add_argument("--threads", type=int, default=None, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ª–∏—Å—Ç–æ–≤")

    args = parser.parse_args()

    # === –ö–æ–Ω—Ñ–∏–≥ ===
    project_name = args.project or Config.get_last_project() or input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    cfg = Config().load(project_name)
    Config.set_last_project(project_name)
    cfg.init_random()

    # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª ===
    if not cfg.input_file or not os.path.exists(cfg.input_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{cfg.input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit(1)

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ===
    img, tile_size, px_per_mm, dpi = load_image(cfg.input_file, cfg.cols, cfg.rows)
    output_dir = cfg.make_output_dir()
    # === –ê–≤—Ç–æ-DPI –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ ===
    w_px, h_px = img.size
    dpi_x = w_px / (cfg.sheet_w_mm / 25.4)
    dpi_y = h_px / (cfg.sheet_h_mm / 25.4)
    export_dpi = (dpi_x + dpi_y) / 2
    px_per_mm = export_dpi / 25.4

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç—ã –≤—Å—ë –∂–µ —Ö–æ—á–µ—à—å —Ä–∞–∑–Ω–æ–µ
    px_per_mm_grid = px_per_mm
    px_per_mm_sheets = px_per_mm
    dpi_grid = export_dpi
    dpi_sheets = export_dpi

    print(f"üìê –ê–≤—Ç–æ-DPI –¥–ª—è –ø–µ—á–∞—Ç–∏: {export_dpi:.2f}")
    print(f"‚ÑπÔ∏è px_per_mm: {px_per_mm:.3f}")


    # === –†–µ–∂–∏–º: –ø–æ–∏—Å–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ ===
    if args.detect_whites:
        whites = detect_white_tiles(img, cfg)
        save_white_tiles(cfg, whites)
        print("‚úÖ –ë–µ–ª—ã–µ —Ç–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
        exit(0)

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º white_tiles –∏ state ===
    exclude_coords = load_white_tiles(cfg)
    tiles = split_tiles(img, cfg, exclude_coords)
    img_tiles = {coord: tile for (_, coord, tile) in tiles}

    state = load_random_state(cfg)
    if args.reshuffle or not state:
        state = generate_random_state(cfg, tiles)

    # === –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω) ===
    if args.pages:
        selected_indices = [int(x) for x in args.pages.split(",")]
        selected_pages = [p for p in state["pages"] if p["index"] in selected_indices]
    else:
        selected_pages = None

    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")

    # === –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º grid –∏ sheets ===
    tasks = []
    with ProcessPoolExecutor(max_workers=2) as pool:
        # GRID —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ —Å–≤–æ–∏–º dpi_grid/px_per_mm_grid
        tasks.append(pool.submit(task_grid, cfg, img, tile_size, px_per_mm_grid, dpi_grid, output_dir))

        # SHEETS —Ä–µ–Ω–¥–µ—Ä–∏–º —Å dpi_sheets/px_per_mm_sheets
        tasks.append(pool.submit(task_sheets, cfg, img_tiles, state,
                                px_per_mm_sheets, dpi_sheets, output_dir,
                                args.threads, selected_pages))


        for fut in as_completed(tasks):
            print(fut.result())

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÇ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {output_dir}")
