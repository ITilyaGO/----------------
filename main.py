import multiprocessing
multiprocessing.freeze_support()

import argparse
import os
import random
import datetime
from concurrent.futures import ProcessPoolExecutor

from config_manager import auto_load_project, save_config, apply_config_overrides
from image_loader import load_image
from white_tiles import detect_white_tiles
from tiles import split_tiles
from sheets import make_shuffled_sheets
from grid import make_grid
from io_helpers import save_answers
import config  # ‚úÖ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –º–æ–¥—É–ª—å, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ


if __name__ == "__main__":  # üß© –í–°–Å —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞

    # === –ê—Ä–≥—É–º–µ–Ω—Ç—ã ===
    parser = argparse.ArgumentParser()
    parser.add_argument("--detect-whites", action="store_true",
                        help="–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ –∏ –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª white_tiles.txt")
    args = parser.parse_args()

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç ===
    project_name, config_dict = auto_load_project()
    apply_config_overrides(config_dict, "config")  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º —Å–∞–º –º–æ–¥—É–ª—å config
    print(f"üìÅ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {project_name}")

    # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª ===
    if not config.input_file or not os.path.exists(config.input_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{config.input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'.")
        exit(1)

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–¥–∞ ===
    if config.random_seed is not None:
        random.seed(config.random_seed)
        print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–¥: {config.random_seed}")
    else:
        print("üé≤ –°–∏–¥ –Ω–µ –∑–∞–¥–∞–Ω (–±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)")

    # === –ü–∞–ø–∫–∏ ===
    timestamp = datetime.datetime.now().strftime("%Y.%m.%d_%H.%M.%S")
    output_dir = os.path.join("out", project_name, timestamp)
    os.makedirs(output_dir, exist_ok=True)

    output_grid = os.path.join(output_dir, "grid.png")
    output_answers_txt = os.path.join(output_dir, "answers.txt")

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    img, tile_size, px_per_mm, dpi = load_image(config.input_file, config.cols, config.rows)

    # === –ê–≤—Ç–æ-DPI ===
    w_px, h_px = img.size
    dpi_x = w_px / (config.sheet_w_mm / 25.4)
    dpi_y = h_px / (config.sheet_h_mm / 25.4)
    export_dpi = (dpi_x + dpi_y) / 2
    print(f"üìê –ê–≤—Ç–æ-DPI –¥–ª—è –ø–µ—á–∞—Ç–∏: {export_dpi:.2f}")

    px_per_mm = export_dpi / 25.4

    # === –ë–µ–ª—ã–µ —Ç–∞–π–ª—ã ===
    inputs_dir = "inputs"
    os.makedirs(inputs_dir, exist_ok=True)
    whites_file = config_dict.get("exclude_file") or os.path.join(inputs_dir, f"{project_name}_white_tiles.txt")
    config_dict["exclude_file"] = whites_file
    save_config(project_name, config_dict)

    # === –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –±–µ–ª—ã—Ö ===
    if args.detect_whites:
        whites = detect_white_tiles(img, config.cols, config.rows, tile_size)
        with open(whites_file, "w", encoding="utf-8") as f:
            f.write("exclude_coords = [\n")
            for w in whites:
                f.write(f'    "{w}",\n')
            f.write("]\n")
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(whites)} –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ ‚Üí {whites_file}")
        exit(0)

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===
    exclude_coords = []
    if os.path.exists(whites_file):
        local_vars = {}
        exec(open(whites_file, encoding="utf-8").read(), {}, local_vars)
        exclude_coords = local_vars.get("exclude_coords", [])
        print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è ({len(exclude_coords)}): {exclude_coords}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {whites_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ whites_gui.py")

    # === –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–∞–π–ª–æ–≤ ===
    tiles = split_tiles(img, config.cols, config.rows, tile_size, exclude_coords)

    # === –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===
    with ProcessPoolExecutor() as executor:
        fut_sheets = executor.submit(make_shuffled_sheets, tiles, px_per_mm, export_dpi, output_dir)
        fut_grid = executor.submit(make_grid, img, config.cols, config.rows, tile_size, px_per_mm, export_dpi, output_grid)

        answers_log = fut_sheets.result()
        fut_grid.result()

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
    save_answers(answers_log, config.random_seed, output_answers_txt)
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÇ –ü–∞–ø–∫–∞: {output_dir}")
    print(f"üìÑ –û—Ç–≤–µ—Ç—ã: {output_answers_txt}")
