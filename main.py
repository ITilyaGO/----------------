import argparse, os, random
from config import *                     # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
from config import make_output_dir       # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
from image_loader import load_image
from white_tiles import detect_white_tiles
from tiles import split_tiles
from sheets import make_shuffled_sheets
from grid import make_grid
from io_helpers import save_answers
from concurrent.futures import ProcessPoolExecutor, as_completed

if random_seed is not None:
    random.seed(random_seed)
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–¥: {random_seed}")
else:
    print("üé≤ –°–∏–¥ –Ω–µ –∑–∞–¥–∞–Ω")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--detect-whites", action="store_true",
                        help="–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ –∏ –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª white_tiles.txt")
    args = parser.parse_args()

    # 1) —Å–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—É—é –ø–∞–ø–∫—É –í –û–î–ù–û–ú –º–µ—Å—Ç–µ
    output_dir = make_output_dir()
    output_grid = os.path.join(output_dir, "grid.png")
    output_answers_txt = os.path.join(output_dir, "answers.txt")

    # 2) –≥—Ä—É–∑–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img, tile_size, px_per_mm, dpi = load_image(input_file, cols, rows)
    # —Ä–∞–∑–º–µ—Ä—ã –≤ –º–º –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    target_w_mm = sheet_w_mm
    target_h_mm = sheet_h_mm

    # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–∏–∫—Å–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —É—á—ë—Ç–æ–º –∫—Ä–æ–ø–∞ –ø–æ–¥ —Ç–∞–π–ª—ã)
    w_px, h_px = img.size

    dpi_x = w_px / (target_w_mm / 25.4)
    dpi_y = h_px / (target_h_mm / 25.4)

    export_dpi = (dpi_x + dpi_y) / 2  # —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–π DPI
    print(f"üìê –ê–≤—Ç–æ-DPI –¥–ª—è –ø–µ—á–∞—Ç–∏: {export_dpi:.2f}")
    
    px_per_mm = export_dpi / 25.4 
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    base_name = os.path.splitext(os.path.basename(input_file))[0]
    inputs_dir = "inputs"
    os.makedirs(inputs_dir, exist_ok=True)
    whites_file = os.path.join(inputs_dir, f"{base_name}_white_tiles.txt")

    if args.detect_whites:
        whites = detect_white_tiles(img, cols, rows, tile_size)
        with open(whites_file, "w", encoding="utf-8") as f:
            f.write("exclude_coords = [\n")
            for w in whites:
                f.write(f'    "{w}",\n')
            f.write("]\n")
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(whites)} –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ ‚Üí {whites_file}")
    else:
        exclude_coords = []
        if os.path.exists(whites_file):
            local_vars = {}
            exec(open(whites_file, encoding="utf-8").read(), {}, local_vars)
            exclude_coords = local_vars.get("exclude_coords", [])
            print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ {whites_file}: {exclude_coords}")
        else:
            # —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí —Å–ø—Ä–æ—Å–∏–º
            answer = input(f"‚ö†Ô∏è –§–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π {whites_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π? (y/n): ").strip().lower()
            if answer == "y":
                with open(whites_file, "w", encoding="utf-8") as f:
                    f.write("exclude_coords = []\n")
                print(f"üÜï –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {whites_file}")
            else:
                print("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.")


        tiles = split_tiles(img, cols, rows, tile_size, exclude_coords)
        with ProcessPoolExecutor() as executor:
            fut_sheets = executor.submit(make_shuffled_sheets, tiles, px_per_mm, export_dpi, output_dir)
            fut_grid = executor.submit(make_grid, img, cols, rows, tile_size, px_per_mm, export_dpi, output_grid)

            answers_log = fut_sheets.result()
            fut_grid.result()

        save_answers(answers_log, random_seed, output_answers_txt)
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"üìÇ –ü–∞–ø–∫–∞: {output_dir}")
        print(f"üìÑ –û—Ç–≤–µ—Ç—ã: {output_answers_txt}")
