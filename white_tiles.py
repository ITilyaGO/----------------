import os
from PIL import Image
from tqdm import tqdm


def detect_white_tiles(img, cfg, threshold=250):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–∞–π–ª–æ–≤,
    –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è ¬´–±–µ–ª—ã–º–∏¬ª (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å–≤–µ—Ç–ª—ã–º–∏).
    """
    print("üîç –ü–æ–∏—Å–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤...")
    tile_size = img.width // cfg.cols
    whites = []

    for row in tqdm(range(cfg.rows), desc="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫"):
        for col in range(cfg.cols):
            box = (col * tile_size, row * tile_size,
                   (col + 1) * tile_size, (row + 1) * tile_size)
            tile = img.crop(box)
            min_val, max_val = tile.convert("L").getextrema()
            if min_val >= threshold:
                coord = f"{cfg.letters[row]}{col+1}"
                whites.append(coord)

    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤: {len(whites)}")
    return whites


def save_white_tiles(cfg, whites):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ –≤ out/<project>/white_tiles.txt
    –≤ –≤–∏–¥–µ Python-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    os.makedirs(cfg.project_dir, exist_ok=True)
    with open(cfg.white_tiles_file, "w", encoding="utf-8") as f:
        f.write("exclude_coords = [\n")
        for coord in whites:
            f.write(f'    "{coord}",\n')
        f.write("]\n")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Å–ø–∏—Å–æ–∫ –±–µ–ª—ã—Ö —Ç–∞–π–ª–æ–≤ ‚Üí {cfg.white_tiles_file}")


def load_white_tiles(cfg):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç exclude_coords –∏–∑ out/<project>/white_tiles.txt (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
    """
    if not os.path.exists(cfg.white_tiles_file):
        print(f"‚ö†Ô∏è –§–∞–π–ª {cfg.white_tiles_file} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±–µ–ª—ã–µ —Ç–∞–π–ª—ã –Ω–µ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è.")
        return []

    local_vars = {}
    with open(cfg.white_tiles_file, "r", encoding="utf-8") as f:
        code = f.read()
        exec(code, {}, local_vars)
    exclude_coords = local_vars.get("exclude_coords", [])
    print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exclude_coords)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {exclude_coords}")
    return exclude_coords
