import os
import json
import random
import math
import hashlib
from tqdm import tqdm

from PIL import Image


def split_tiles(img, cfg, exclude_coords):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ç–∞–π–ª—ã (—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ)."""
    tiles = []
    tile_size = img.width // cfg.cols
    for row in range(cfg.rows):
        for col in range(cfg.cols):
            coord = f"{cfg.letters[row]}{col+1}"
            if coord in exclude_coords:
                continue
            box = (col * tile_size, row * tile_size, (col + 1) * tile_size, (row + 1) * tile_size)
            tile = img.crop(box)
            tiles.append(((row, col), coord, tile))
    return tiles


# ====================================================================== #
# ====================== RANDOM STATE CONTROL ========================== #
# ====================================================================== #

def generate_random_state(cfg, tiles):
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É random_state.json:
      - matrix —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ç–∞–π–ª–æ–≤
      - rotation_matrix —Å —É–≥–ª–∞–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
      - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    """
    print("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ random_state.json ...")

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Å–∏–¥ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å)
    cfg.init_random()

    total_tiles = len(tiles)
    print(f"–í—Å–µ–≥–æ —Ç–∞–π–ª–æ–≤: {total_tiles}")

    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–∞–π–ª–æ–≤ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –ª–∏—Å—Ç
    px_per_mm = cfg.sheet_export_dpi / 25.4
    shuffled_tile_px = int(cfg.shuffled_tile_mm * px_per_mm)
    gap_px = int(cfg.gap_mm * px_per_mm)
    margin_px = int(cfg.margin_mm * px_per_mm)
    sheet_w_px = int(cfg.sheet_w_mm * px_per_mm)
    sheet_h_px = int(cfg.sheet_h_mm * px_per_mm)

    tiles_per_row = (sheet_w_px - 2 * margin_px + gap_px) // (shuffled_tile_px + gap_px)
    tiles_per_col = (sheet_h_px - 2 * margin_px + gap_px) // (shuffled_tile_px + gap_px)
    tiles_per_sheet = tiles_per_row * tiles_per_col

    print(f"üìê –õ–∏—Å—Ç –≤–º–µ—â–∞–µ—Ç {tiles_per_row} √ó {tiles_per_col} = {tiles_per_sheet} —Ç–∞–π–ª–æ–≤")

    random.shuffle(tiles)
    pages = []

    # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–ª—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    total_pages = math.ceil(total_tiles / tiles_per_sheet)
    for page_idx in tqdm(range(total_pages), desc="üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü"):
        start = page_idx * tiles_per_sheet
        end = min(start + tiles_per_sheet, total_tiles)
        page_tiles = tiles[start:end]

        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
        matrix = []
        rotation_matrix = []

        for r in range(tiles_per_col):
            row_coords = []
            row_rotations = []
            for c in range(tiles_per_row):
                idx = r * tiles_per_row + c
                if idx < len(page_tiles):
                    (_, coord, _) = page_tiles[idx]
                    row_coords.append(coord)

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
                    if cfg.rotate_tiles:
                        angle = random.choice([0, 90, 180, 270])
                    elif cfg.rotate_tiles is None:
                        # 50% –ª–∏—Å—Ç–æ–≤ —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏
                        angle = random.choice([0, 0, 90, 180, 270])
                    else:
                        angle = 0
                    row_rotations.append(angle)
                else:
                    row_coords.append(None)
                    row_rotations.append(0)

            matrix.append(row_coords)
            rotation_matrix.append(row_rotations)

        pages.append({
            "index": page_idx + 1,
            "rotated": any(any(a != 0 for a in row) for row in rotation_matrix),
            "matrix": matrix,
            "rotation_matrix": rotation_matrix
        })

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    state = {
        "config_hash": cfg.compute_hash(),
        "seed": cfg.random_seed,
        "tiles_per_row": tiles_per_row,
        "tiles_per_col": tiles_per_col,
        "pages": pages
    }

    save_random_state(cfg, state)
    return state


def save_random_state(cfg, state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç random_state.json –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –ø–∞–ø–∫–µ."""
    with open(cfg.random_state_file, "w", encoding="utf-8") as f:
        json.dump(state, f, indent=4, ensure_ascii=False)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω random_state.json ‚Üí {cfg.random_state_file}")


def load_random_state(cfg):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç random_state.json –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É."""
    if not os.path.exists(cfg.random_state_file):
        print("‚ö†Ô∏è random_state.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        return None

    with open(cfg.random_state_file, "r", encoding="utf-8") as f:
        state = json.load(f)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞
    current_hash = cfg.compute_hash()
    if state.get("config_hash") != current_hash:
        print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è, random_state.json —É—Å—Ç–∞—Ä–µ–ª.")
        return None

    print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω random_state.json ({len(state['pages'])} —Å—Ç—Ä–∞–Ω–∏—Ü)")
    return state
