import os
import json
import hashlib
import datetime
import random
import shutil
from PIL import Image


class Config:
    def __init__(self):
        # --- –ø—Ä–æ–µ–∫—Ç ---
        self.project_name = "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"
        self.random_seed = 63235212

        # --- –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
        self.input_file = ""
        self.cols = 20
        self.rows = 28
        self.grid_line_width = 16
        self.font_scale = 1.0
        self.tile_mm_target = 30.0

        # --- —à—Ä–∏—Ñ—Ç—ã ---
        self.font_path = "resources/DearType - Lifehack Sans Medium.otf"
        self.letters = list("–ê–ë–í–ì–î–ï–ñ–ò–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø")

        # --- –ª–∏—Å—Ç—ã ---
        self.sheet_w_mm = 210
        self.sheet_h_mm = 297
        self.sheet_export_dpi = 1200
        self.shuffled_tile_mm = 20
        self.gap_mm = 2.5
        self.margin_mm = 3
        self.rotate_tiles = None

        # --- –æ—Ç–≤–µ—Ç—ã ---
        self.answer_scale = 0.25
        self.answer_font_scale = 0.9
        self.answer_font_min = 12
        self.answer_outline = True
        self.answer_outline_width = 10
        self.answer_outline_fill = "white"
        self.answer_text_fill = "black"
        self.answer_align_x = "center"   # left | center | right
        self.answer_align_y = "bottom"   # top | center | bottom
        self.answer_margin_px = 8

        # --- –Ω—É–º–µ—Ä–∞—Ü–∏—è ---
        self.circle_diametr_mm = 4
        self.circle_font_mm = 4.5
        self.answers_circle_scale = 1
        self.circle_fill = "white"
        self.circle_outline = "white"
        self.circle_outline_width = 1
        self.circle_text_fill = "black"

        # --- –ø–æ–¥–ø–∏—Å–∏ ---
        self.label_font_mm = 6.0
        self.grid_label_font_mm = 8.0
        self.label_area_mm = self.grid_label_font_mm

        # --- —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É—Ç–∏ ---
        self.project_dir = None
        self.random_state_file = None
        self.white_tiles_file = None
        self.config_file = None

        Image.MAX_IMAGE_PIXELS = None

    # === —Å–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===
    def ensure_project_dir(self):
        """–°–æ–∑–¥–∞—ë—Ç /out/<project>/ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏."""
        base = os.path.join("out", self.project_name)
        os.makedirs(base, exist_ok=True)
        self.project_dir = base
        self.random_state_file = os.path.join(base, "random_state.json")
        self.white_tiles_file = os.path.join(base, "white_tiles.txt")
        self.config_file = os.path.join(base, "config.json")
        return base

    # === –≤—ã–±–æ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ===
    def select_input_file(self):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏–∑ inputs/ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –ø—Ä–æ–µ–∫—Ç."""
        inputs_dir = "inputs"
        os.makedirs(inputs_dir, exist_ok=True)

        files = [
            f for f in os.listdir(inputs_dir)
            if os.path.isfile(os.path.join(inputs_dir, f))
            and f.lower().endswith((".png", ".jpg", ".jpeg", ".tif", ".tiff"))
        ]

        if not files:
            print(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ '{inputs_dir}' –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            print("–ü–æ–ª–æ–∂–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç—É –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            exit(1)

        print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ 'inputs/':")
        for i, name in enumerate(files, 1):
            print(f"  {i}. {name}")

        try:
            choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1‚Äì{len(files)}): ").strip())
            chosen = files[choice - 1]
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
            exit(1)

        src_path = os.path.join(inputs_dir, chosen)
        dst_path = os.path.join(self.project_dir, chosen)
        shutil.copy2(src_path, dst_path)

        self.input_file = dst_path
        print(f"üìã –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {chosen}")
        print(f"üì¶ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {self.project_dir}")
        self.save()

    # === –∑–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
    def load(self, project_name=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–µ–∫—Ç–∞ –≤ out/<project>/."""
        if project_name:
            self.project_name = project_name

        self.ensure_project_dir()

        if os.path.exists(self.config_file):
            with open(self.config_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            for k, v in data.items():
                if hasattr(self, k):
                    setattr(self, k, v)
            print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {self.config_file}")
        else:
            print(f"üÜï –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π: {self.config_file}")
            self.select_input_file()
            self.save()

        if not self.input_file or not os.path.exists(self.input_file):
            print("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.")
            self.select_input_file()

        return self

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥."""
        os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
        with open(self.config_file, "w", encoding="utf-8") as f:
            json.dump(self.as_dict(), f, indent=4, ensure_ascii=False)
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {self.config_file}")

    def as_dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø—É—Ç–µ–π."""
        exclude = {"project_dir", "random_state_file", "white_tiles_file", "config_file"}
        return {k: v for k, v in self.__dict__.items() if k not in exclude}

    def init_random(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç random –ø–æ —Å–∏–¥y (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π)."""
        if self.random_seed is not None:
            random.seed(self.random_seed)
            print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–¥: {self.random_seed}")
        else:
            self.random_seed = random.randint(0, 999999999)
            random.seed(self.random_seed)
            print(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Å–∏–¥: {self.random_seed}")
            self.save()

    def compute_hash(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç sha256 –æ—Ç config.json."""
        self.save()
        with open(self.config_file, "rb") as f:
            data = f.read()
        return hashlib.sha256(data).hexdigest()

    def make_output_dir(self):
        """–°–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞."""
        timestamp = datetime.datetime.now().strftime("%Y.%m.%d_%H.%M.%S")
        path = os.path.join(self.project_dir, timestamp)
        os.makedirs(path, exist_ok=True)
        return path

    # === —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º ===
    @staticmethod
    def get_last_project_path():
        return os.path.join("configs", "last_project.txt")

    @classmethod
    def get_last_project(cls):
        path = cls.get_last_project_path()
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                name = f.read().strip()
                return name if name else None
        return None

    @classmethod
    def set_last_project(cls, project_name):
        os.makedirs("configs", exist_ok=True)
        path = cls.get_last_project_path()
        with open(path, "w", encoding="utf-8") as f:
            f.write(project_name or "")
