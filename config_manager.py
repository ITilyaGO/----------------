# config_manager.py
import os
import json
import datetime

CONFIGS_DIR = "configs"
LAST_PROJECT_FILE = os.path.join(CONFIGS_DIR, "last_project.txt")

os.makedirs(CONFIGS_DIR, exist_ok=True)

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ ===

def apply_config_overrides(config_dict, module_name="config"):
    """
    –ü–æ–¥–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî config)
    –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ config_dict, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    """
    import importlib

    module = importlib.import_module(module_name)
    for key, value in config_dict.items():
        if hasattr(module, key):
            setattr(module, key, value)


def apply_config(config: dict, globals_dict=None):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å config["..."] –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
    """
    import inspect

    if globals_dict is None:
        # –±–µ—Ä—ë–º globals() –∏–∑ –º–µ—Å—Ç–∞, –≥–¥–µ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞
        frame = inspect.currentframe().f_back
        globals_dict = frame.f_globals

    for key, value in config.items():
        if isinstance(key, str) and key.isidentifier():
            globals_dict[key] = value


def get_last_project():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ None."""
    if os.path.exists(LAST_PROJECT_FILE):
        with open(LAST_PROJECT_FILE, "r", encoding="utf-8") as f:
            name = f.read().strip()
            return name if name else None
    return None


def set_last_project(project_name: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
    with open(LAST_PROJECT_FILE, "w", encoding="utf-8") as f:
        f.write(project_name or "")


def load_or_create_config(project_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–µ–∫—Ç–∞, —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    config_path = os.path.join(CONFIGS_DIR, f"{project_name}.json")

    if not os.path.exists(config_path):
        print(f"üÜï –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥: {config_path}")
        config = {
            "project_name": project_name,
            "input_file": "",
            "cols": 9,
            "rows": 13,
            "sheet_w_mm": 210,
            "sheet_h_mm": 297,
            "exclude_file": f"inputs/{project_name}_white_tiles.txt",
            "created_at": datetime.datetime.now().isoformat()
        }
        save_config(project_name, config)
        return config

    with open(config_path, "r", encoding="utf-8") as f:
        return json.load(f)


def save_config(project_name, config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–µ–∫—Ç–∞."""
    os.makedirs(CONFIGS_DIR, exist_ok=True)
    config_path = os.path.join(CONFIGS_DIR, f"{project_name}.json")
    with open(config_path, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4, ensure_ascii=False)


def auto_load_project(project_name=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞.
    –ï—Å–ª–∏ project_name –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≥—Ä—É–∑–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π.
    –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –Ω–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not project_name:
        project_name = get_last_project()
        if project_name:
            print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç: {project_name}")
        else:
            project_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
            if not project_name:
                print("‚ùå –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –≤—ã—Ö–æ–¥.")
                exit(1)

    set_last_project(project_name)
    config = load_or_create_config(project_name)
    return project_name, config
