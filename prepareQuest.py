from PIL import Image, ImageDraw, ImageFont
import random
import os
import datetime
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm   # pip install tqdm

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# input_file = "–ö–∞—Ä—Ç–∞ –∫–≤–∞–¥—Ä–∞—Ç—ã SRA3.png"
input_file = "–•–º–µ–ª—å–Ω–∏–∫–∏ (10 000)_–±–µ–∑ –ª–∏–Ω–∏–π.tif"
cols = 9    # —Å–∫–æ–ª—å–∫–æ —Ç–∞–π–ª–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ
rows = 13   # —Å–∫–æ–ª—å–∫–æ —Ç–∞–π–ª–æ–≤ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
gap = 80    # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–π–ª–∞–º–∏ (px)
grid_line_width = 16  # —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —Å–µ—Ç–∫–∏ (px)
font_scale = 1 # –¥–æ–ª—è –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ (0.35 = 35%)
save_tiles = False
exclude_coords = ["–ê2","–ê3","–ê4","–ê5","–ë3","–ë4","–ë5","–í4","–í5"]
tile_mm_target = 30.0

# –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
font_path = "DearType - Lifehack Sans Medium.otf"
Image.MAX_IMAGE_PIXELS = None
letters = list("–ê–ë–í–ì–î–ï–ñ–ò–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø")

# === –ù–ê–°–¢–†–û–ô–ö–ò –õ–ò–°–¢–û–í –î–õ–Ø SHUFFLED ===
sheet_w_mm = 210   # —à–∏—Ä–∏–Ω–∞ –ª–∏—Å—Ç–∞ –≤ –º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, A2 = 420)
sheet_h_mm = 297   # –≤—ã—Å–æ—Ç–∞ –ª–∏—Å—Ç–∞ –≤ –º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, A2 = 594)
shuffled_tile_mm = 30   # —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ –Ω–∞ –ª–∏—Å—Ç–µ –≤ –º–º
rotate_tiles = False       # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –ª–∏ —Ç–∞–π–ª—ã —Å–ª—É—á–∞–π–Ω–æ (0/90/180/270)
answer_scale = 0.25       # –º–∞—Å—à—Ç–∞–± –º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏ –ª–∏—Å—Ç–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
answer_font_scale = 0.9   # –¥–æ–ª—è –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ (0.35 = 35%)
answer_font_min = 12       # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ px
answer_outline = True      # –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–±–≤–æ–¥–∫—É
answer_outline_width = 10   # —Ç–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏ (px)
answer_outline_fill = "white"  # —Ü–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
answer_text_fill = "black"   # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
# === –î–ò–†–ï–ö–¢–û–†–ò–ò ===
timestamp = datetime.datetime.now().strftime("%Y.%m.%d_%H.%M.%S")
output_dir = os.path.join(os.getcwd(), "out" , timestamp)
os.makedirs(output_dir, exist_ok=True)

output_folder = os.path.join(output_dir, "tiles")
if save_tiles:
    os.makedirs(output_folder, exist_ok=True)

output_grid = os.path.join(output_dir, "grid.png")
output_answers_txt = os.path.join(output_dir, "answers.txt")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def center_in_cell(draw, text, x0, y0, cell_w, cell_h, font):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ"""
    bbox = draw.textbbox((0, 0), text, font=font)
    tw, th = bbox[2] - bbox[0], bbox[3] - bbox[1]
    x = x0 + (cell_w - tw) // 2 - bbox[0]
    y = y0 + (cell_h - th) // 2 - bbox[1]
    return x, y

def draw_text_with_outline(draw, pos, text, font, fill, outline_fill, outline_width):
    x, y = pos
    # –æ–±–≤–æ–¥–∫–∞ (–≤—Å–µ —Å–º–µ—â–µ–Ω–∏—è –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏)
    for dx in range(-outline_width, outline_width + 1):
        for dy in range(-outline_width, outline_width + 1):
            if dx*dx + dy*dy <= outline_width*outline_width:
                draw.text((x + dx, y + dy), text, font=font, fill=outline_fill)
    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    draw.text((x, y), text, font=font, fill=fill)

# === –ó–ê–ì–†–£–ó–ö–ê ===
print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
img = Image.open(input_file).convert("RGBA")
w, h = img.size

dpi = img.info.get("dpi", (96, 96))[0]
print("DPI - ", dpi)
px_per_mm = w / (cols * tile_mm_target)
px_per_mm = dpi / 25.4

# === –†–ê–°–ß–Å–¢ –†–ê–ó–ú–ï–†–ê –ö–í–ê–î–†–ê–¢–û–í ===
tile_w = w // cols
tile_h = h // rows
tile_size = min(tile_w, tile_h)
tile_w = tile_h = tile_size

new_w = tile_w * cols
new_h = tile_h * rows
crop_x = w - new_w
crop_y = h - new_h
if crop_x > 0 or crop_y > 0:
    print(f"‚ö†Ô∏è –û—Ç–±—Ä–æ—à–µ–Ω–æ —Å–ø—Ä–∞–≤–∞: {crop_x}px, —Å–Ω–∏–∑—É: {crop_y}px")
img = img.crop((0, 0, new_w, new_h))

tile_mm = tile_size / px_per_mm
print(f"üî≤ –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞: {tile_size}px ‚âà {tile_mm:.2f} –º–º")

# === –†–ê–ó–ë–ò–í–ê–ï–ú –ù–ê –ö–£–°–û–ß–ö–ò ===
tiles = []
for row in range(rows):
    for col in range(cols):
        box = (col * tile_w, row * tile_h, (col + 1) * tile_w, (row + 1) * tile_h)
        tile = img.crop(box)
        tiles.append(((row, col), tile))  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

# === –£–ë–ò–†–ê–ï–ú –ò–°–ö–õ–Æ–ß–Å–ù–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´ ===

tiles_filtered = []
for (row, col), tile in tiles:
    coord = f"{letters[row]}{col+1}"
    if coord not in exclude_coords:
        tiles_filtered.append(((row, col), tile))

tiles = tiles_filtered

# === –°–û–•–†–ê–ù–Ø–ï–ú –¢–ê–ô–õ–´ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
if save_tiles:
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–ª—ã...")
    def save_tile(data):
        idx, (pos, tile) = data
        path = os.path.join(output_folder, f"tile_{idx+1}.png")
        tile.save(path)

    with ThreadPoolExecutor() as executor:
        list(tqdm(executor.map(save_tile, enumerate(tiles)), total=len(tiles)))

# === –°–û–ó–î–ê–Å–ú –õ–ò–°–¢–´ SHUFFLED ===
print("üß© –°–æ–∑–¥–∞—ë–º shuffled –ª–∏—Å—Ç—ã...")

sheet_w_px = int(sheet_w_mm * px_per_mm)
sheet_h_px = int(sheet_h_mm * px_per_mm)
# –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ –¥–ª—è shuffled –≤ px
shuffled_tile_px = int(shuffled_tile_mm * px_per_mm)

tiles_per_row = sheet_w_px // (tile_w + gap)
tiles_per_col = sheet_h_px // (tile_h + gap)
tiles_per_sheet = tiles_per_row * tiles_per_col

print(f"üìÑ –õ–∏—Å—Ç {sheet_w_mm}x{sheet_h_mm} –º–º ‚Üí {tiles_per_row}√ó{tiles_per_col} —Ç–∞–π–ª–æ–≤")

all_tiles = tiles[:]
random.shuffle(all_tiles)

answers_log = []

# –®—Ä–∏—Ñ—Ç –¥–ª—è –º–∏–Ω–∏-–≤–µ—Ä—Å–∏–π
t_s = int(tile_w * answer_scale)
ans_font_size = max(answer_font_min, int(t_s * answer_font_scale))
try:
    ans_font = ImageFont.truetype(font_path, ans_font_size)
except OSError:
    ans_font = ImageFont.load_default()

for sheet_idx in range(0, len(all_tiles), tiles_per_sheet):
    page_tiles = all_tiles[sheet_idx:sheet_idx + tiles_per_sheet]
    sheet_img = Image.new("RGBA", (sheet_w_px, sheet_h_px), (255, 255, 255, 255))

    ans_sheet_w = int(sheet_w_px * answer_scale)
    ans_sheet_h = int(sheet_h_px * answer_scale)
    answer_img = Image.new("RGBA", (ans_sheet_w, ans_sheet_h), (255, 255, 255, 255))
    draw_ans = ImageDraw.Draw(answer_img)

    page_table = [["" for _ in range(tiles_per_row)] for _ in range(tiles_per_col)]

    for i, (orig_pos, tile) in enumerate(page_tiles):
        row_o, col_o = orig_pos
        orig_label = f"{letters[row_o]}{col_o+1}"

        if rotate_tiles:
            angle = random.choice([0, 90, 180, 270])
            tile = tile.rotate(angle, expand=True)

        row = i // tiles_per_row
        col = i % tiles_per_row

        row = i // tiles_per_row
        col = i % tiles_per_row

        # —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏ –Ω–∞ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
        used_cols = min(len(page_tiles) - row * tiles_per_row, tiles_per_row)
        used_rows = min((len(page_tiles) + tiles_per_row - 1) // tiles_per_row, tiles_per_col)

        grid_w_used = used_cols * tile_w + (used_cols - 1) * gap
        grid_h_used = used_rows * tile_h + (used_rows - 1) * gap

        offset_x = (sheet_w_px - grid_w_used) // 2
        offset_y = (sheet_h_px - grid_h_used) // 2

        x = offset_x + col * (tile_w + gap)
        y = offset_y + row * (tile_h + gap)
        sheet_img.paste(tile.resize((tile_w, tile_h)), (x, y))

        # –º–∏–Ω–∏ –≤–µ—Ä—Å–∏—è
        grid_w_small = int(grid_w_used * answer_scale)
        grid_h_small = int(grid_h_used * answer_scale)
        offset_xs = (ans_sheet_w - grid_w_small) // 2
        offset_ys = (ans_sheet_h - grid_h_small) // 2

        x_s = offset_xs + int(col * (tile_w + gap) * answer_scale)
        y_s = offset_ys + int(row * (tile_h + gap) * answer_scale)

        tile_small = tile.resize((t_s, t_s))
        answer_img.paste(tile_small, (x_s, y_s))

        tx, ty = center_in_cell(draw_ans, orig_label, x_s, y_s, t_s, t_s, ans_font)
        if answer_outline:
            draw_text_with_outline(draw_ans, (tx, ty), orig_label,
                                font=ans_font,
                                fill=answer_text_fill,
                                outline_fill=answer_outline_fill,
                                outline_width=answer_outline_width)
        else:
            draw_ans.text((tx, ty), orig_label, fill=answer_text_fill, font=ans_font)


        page_table[row][col] = orig_label

    out_path = os.path.join(output_dir, f"shuffled_{sheet_idx//tiles_per_sheet+1}.png")
    sheet_img.save(out_path)

    ans_path = os.path.join(output_dir, f"answers_sheet_{sheet_idx//tiles_per_sheet+1}.png")
    answer_img.save(ans_path)

    answers_log.append(f"\n=== –õ–∏—Å—Ç {sheet_idx//tiles_per_sheet+1} ===\n")
    for r in page_table:
        answers_log.append("\t".join(r))

# === –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–ö–°–¢–û–í–´–ô –§–ê–ô–õ –° –û–¢–í–ï–¢–ê–ú–ò ===
with open(output_answers_txt, "w", encoding="utf-8") as f:
    f.write("\n".join(answers_log))

# === –°–û–ó–î–ê–Å–ú –°–ï–¢–ö–£ –° –ü–û–î–ü–ò–°–Ø–ú–ò ===
print("üó∫Ô∏è –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ç–∫–æ–π...")
grid_w = new_w + tile_w
grid_h = new_h + tile_h
grid_img = Image.new("RGBA", (grid_w, grid_h), (255, 255, 255, 255))
grid_img.paste(img, (tile_w, tile_h))
draw = ImageDraw.Draw(grid_img)

for c in range(cols + 1):
    x = tile_w + c * tile_w
    draw.line([(x, tile_h), (x, grid_h)], fill="black", width=grid_line_width)
for r in range(rows + 1):
    y = tile_h + r * tile_h
    draw.line([(tile_w, y), (grid_w, y)], fill="black", width=grid_line_width)

# –ø–æ–¥–ø–∏—Å–∏
font_size_grid = int(tile_h * font_scale)
try:
    font_grid = ImageFont.truetype(font_path, font_size_grid)
except OSError:
    font_grid = ImageFont.load_default()

# —Ü–∏—Ñ—Ä—ã —Å–≤–µ—Ä—Ö—É
for c in range(cols):
    txt = str(c + 1)
    x, y = center_in_cell(draw, txt, tile_w + c * tile_w, 0, tile_w, tile_h, font_grid)
    draw.text((x, y), txt, fill="black", font=font_grid)

# –±—É–∫–≤—ã —Å–ª–µ–≤–∞
for r in range(rows):
    txt = letters[r]
    x, y = center_in_cell(draw, txt, 0, tile_h + r * tile_h, tile_w, tile_h, font_grid)
    draw.text((x, y), txt, fill="black", font=font_grid)

grid_img.save(output_grid)

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
print(f"üìÇ –ü–∞–ø–∫–∞: {output_dir}")
print(f"üìÑ –û—Ç–≤–µ—Ç—ã: {output_answers_txt}")